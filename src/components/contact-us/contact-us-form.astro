---
import Button from "../../ui/button.astro";
const { lang } = Astro.props;
---

<!-- // Styling Requires Tailwind CSS -->
<form
  action="https://api.web3forms.com/submit"
  method="POST"
  id="form"
  class="needs-validation xl:bg-base-100 xl:p-6 pt-6 rounded-4xl flex flex-col gap-2 xl:gap-4 text-base-content"
  data-astro-reload
  novalidate
>
  <!-- Add your Web3Forms Access Key -->
  <input type="hidden" name="access_key" value="YOUR_ACCESS_KEY_HERE" />

  <input type="checkbox" class="hidden" style="display:none" name="botcheck" />
  <div class="">
    <input
      type="text"
      placeholder={lang === "ar" ? "الاسم الكامل" : "Full Name"}
      required
      class="w-full bg-base-300 p-4 rounded-4xl placeholder:text-zinc-500"
      name="name"
    />
    <div
      class:list={[
        "empty-feedback invalid-feedback text-red-400 mt-1",
        lang === "ar" ? "text-md" : "text-sm",
      ]}
    >
      {
        lang === "ar"
          ? "الرجاء إدخال اسمك الكامل."
          : "Please provide your full name."
      }
    </div>
  </div>
  <div class="">
    <input
      type="text"
      placeholder={lang === "ar" ? "رقم الهاتف" : "Contact Number"}
      required
      class="w-full bg-base-300 p-4 rounded-4xl placeholder:text-zinc-500"
      name="phone"
    />
    <div
      class:list={[
        "empty-feedback invalid-feedback text-red-400 mt-1",
        lang === "ar" ? "text-md" : "text-sm",
      ]}
    >
      {
        lang === "ar"
          ? "الرجاء إدخال رقم هاتفك."
          : "Please provide your contact number."
      }
    </div>
  </div>
  <div class="">
    <label for="email_address" class="sr-only"
      >{lang === "ar" ? "البريد الإلكتروني" : "Email Address"}</label
    ><input
      id="email_address"
      type="email"
      placeholder={lang === "ar" ? "البريد الإلكتروني" : "Email Address"}
      name="email"
      required
      class="w-full bg-base-300 p-4 rounded-4xl placeholder:text-zinc-500"
    />
    <div
      class:list={[
        "empty-feedback invalid-feedback text-red-400 mt-1",
        lang === "ar" ? "text-md" : "text-sm",
      ]}
    >
      {
        lang === "ar"
          ? "الرجاء إدخال بريدك الإلكتروني."
          : "Please provide your email address."
      }
    </div>
    <div class="invalid-feedback text-red-400 text-sm mt-1">
      {
        lang === "ar"
          ? "الرجاء إدخال عنوان بريد إلكتروني صالح."
          : "Please provide a valid email address."
      }
    </div>
  </div>
  <div class="">
    <textarea
      name="message"
      required
      placeholder={lang === "ar" ? "متطلباتك" : "Your Requirements"}
      class="w-full bg-base-300 p-4 rounded-4xl h-36 resize-none placeholder:text-zinc-500"
    ></textarea>
    <div
      class:list={[
        "empty-feedback invalid-feedback text-red-400 mt-1",
        lang === "ar" ? "text-md" : "text-sm",
      ]}
    >
      {
        lang === "ar"
          ? "الرجاء إدخال متطلباتك."
          : "Please provide your requirements."
      }
      {
        lang === "ar"
          ? "الرجاء إدخال متطلباتك."
          : "Please provide your requirements."
      }
    </div>
  </div>
  <button
    type="submit"
    class="bg-white text-black xl:bg-base-content xl:text-accent hover:bg-sky-500 px-4 py-2 rounded-4xl transition-colors duration-300 w-full xl:w-fit font-semibold self-end"
  >
    {lang === "ar" ? "إرسال" : "Send Message"}
  </button>
  <div id="result" class="mt-3 text-center"></div>
</form>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }
</style>

<script is:inline>
  // use astro:page-load event if you are using View Transitions

  document.addEventListener(
    "DOMContentLoaded",
    () => {
      const form = document.getElementById("form");
      const result = document.getElementById("result");

      form.addEventListener("submit", function (e) {
        e.preventDefault();
        form.classList.add("was-validated");
        if (!form.checkValidity()) {
          form.querySelectorAll(":invalid")[0].focus();
          return;
        }
        const formData = new FormData(form);
        const object = Object.fromEntries(formData);
        const json = JSON.stringify(object);

        result.innerHTML = "Sending...";

        fetch("https://api.web3forms.com/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: json,
        })
          .then(async (response) => {
            let json = await response.json();
            if (response.status == 200) {
              result.classList.add("text-green-500");
              result.innerHTML = json.message;
            } else {
              console.log(response);
              result.classList.add("text-red-500");
              result.innerHTML = json.message;
            }
          })
          .catch((error) => {
            console.log(error);
            result.innerHTML = "Something went wrong!";
          })
          .then(function () {
            form.reset();
            form.classList.remove("was-validated");
            setTimeout(() => {
              result.style.display = "none";
            }, 5000);
          });
      });
    },
    { once: true }
  );
</script>
